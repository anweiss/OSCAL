[
  {
    "name": "catalog",
    "group-name": "control-catalog",
    "description": "A collection of controls",
    "remarks": "Catalogs may use section to subdivide the textual contents of a catalog.",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "model-version",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "title",
        "schema_type": "field",
        "cardinality": "one and one only"
      },
      {
        "name": "metadata",
        "schema_type": "field",
        "cardinality": "zero or one"
      },
      {
        "name": "declarations",
        "schema_type": "field",
        "cardinality": "zero or one"
      },
      {
        "name": "references",
        "schema_type": "field",
        "cardinality": "zero or one"
      },
      {
        "name": "section",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "group",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "control",
        "schema_type": "field",
        "cardinality": "zero or more"
      }
    ],
    "examples": [
      {
        "description": "A small catalog with a single control",
        "xml": "\\\n<catalog id=\"simple-example\" model-version=\"0.99\">A Miniature CatalogA Single Control</catalog>\\\n"
      }
    ]
  },
  {
    "name": "declarations",
    "description": "Either a reference to a declarations file, or a set of declarations",
    "schema_type": "field",
    "flags": [
      {
        "name": "href",
        "schema_type": "flag"
      }
    ]
  },
  {
    "name": "section",
    "group-name": "sections",
    "description": "Allows the inclusion of prose content within a Catalog.",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "class",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "title",
        "schema_type": "field",
        "cardinality": "one and one only"
      },
      {
        "name": "prose"
      },
      {
        "name": "section",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "references",
        "schema_type": "field",
        "cardinality": "zero or one"
      }
    ]
  },
  {
    "name": "group",
    "group-name": "groups",
    "description": "A group of controls, or of groups of controls.",
    "remarks": "Catalogs can use groups to provide collections of related controls or Control Groups. A group may have its own properties, statements, parameters, and references, which are inherited by all members of that group. Unlike a section, a group may not contain arbitrary prose directly, only inside its part or control components.",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "class",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "title",
        "schema_type": "field",
        "cardinality": "one and one only"
      },
      {
        "name": "param",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "prop",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "part",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "group",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "control",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "references",
        "schema_type": "field",
        "cardinality": "zero or one"
      }
    ],
    "examples": [
      {
        "xml": "\\\n<group id=\"xyz\">My Groupsome propertyControl</group>\\\n"
      }
    ]
  },
  {
    "name": "control",
    "group-name": "controls",
    "description": "A structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance.",
    "remarks": "Controls may be grouped using group, and controls may be partitioned using part or enhanced using subcontrol.",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "class",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "title",
        "schema_type": "field",
        "cardinality": "one and one only"
      },
      {
        "name": "param",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "prop",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "link",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "part",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "subcontrol",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "references",
        "schema_type": "field",
        "cardinality": "zero or one"
      }
    ],
    "examples": [
      {
        "xml": "\\\n<control id=\"x\">Control 1</control>\\\n"
      }
    ]
  },
  {
    "name": "subcontrol",
    "group-name": "subcontrols",
    "description": "A control extension or enhancement",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "class",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "title",
        "schema_type": "field",
        "cardinality": "one and one only"
      },
      {
        "name": "param",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "prop",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "link",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "part",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "references",
        "schema_type": "field",
        "cardinality": "zero or one"
      }
    ]
  },
  {
    "name": "title",
    "description": "A title for display and navigation, exclusive of more specific properties",
    "schema_type": "field"
  },
  {
    "name": "prop",
    "group-name": "props",
    "description": "A value with a name, attributed to the containing control, subcontrol, part, or group.",
    "remarks": "Properties permit the deployment and management of arbitrary controlled values, with and among control objects (controls, parts, and extensions), for any purpose useful to an application or implementation of those controls. Typically, properties will be used to sort, select, order, and arrange controls or relate them to one another or to class hierarchies, taxonomies, or external authorities.\\n\\nThe value of a property is a simple scalar value or list of values.\\n\\nThe lexical composition of properties may be constrained by declarations including matching to regular expressions or by declaring a known datatype.\\n\\nBecause properties are often used as selectors or identifiers for OSCAL operations, their values can be expected frequently to be normalized (e.g., with respect to whitespace) in use; however, this is application defined.\\n\\nFor singletons (that is, the only element among siblings with its class), properties are especially useful as proxies (unique identifiers) for their controls, such that controls may be returned one for one on queries for properties (name and value). The robustness of such queries can be ensured by appropriate property declarations (as singletons and as identifiers); cf declare-prop in the declarations model (which also supports other constraints over property values).",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "class",
        "schema_type": "flag"
      }
    ],
    "examples": [
      {
        "xml": "\\\n<prop class=\"name\">A1</prop>\\\n"
      }
    ]
  },
  {
    "name": "param",
    "group-name": "parameters",
    "description": "Parameters provide a mechanism for the dynamic assignment of value(s) in a control.",
    "remarks": "In a catalog, a parameter is typically used as a placeholder for the future assignment of a parameter value, although the OSCAL model allows for the direct assignment of a value if desired by the control author. The value may be optionally used to specify one or more values. If no value is provided, then it is expected that the value will be provided at the Profile or Implementation layer.\\n\\nA parameter can include a variety of metadata options that support the future solicitation of one or more values. A label provides a textual placeholder that can be used in a tool to solicit parameter value input, or to display in catalog documentation. The desc provides a short description of what the parameter is used for, which can be used in tooling to help a user understand how to use the parameter. A constraint can be used to provide criteria for the allowed values. A guideline provides a recommendation for the use of a parameter.",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "class",
        "schema_type": "flag"
      },
      {
        "name": "depends-on",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "label",
        "schema_type": "field",
        "description": "A short name for the parameter.",
        "remarks": "The label value should be suitable for inline display in a rendered catalog.",
        "cardinality": "zero or one"
      },
      {
        "name": "desc",
        "schema_type": "field",
        "description": "A short summary of the parameter's intended use.",
        "remarks": " A label is optional, but should be provided unless a select (selection) is provided.",
        "cardinality": "zero or more"
      },
      {
        "name": "constraint",
        "schema_type": "field",
        "description": "A rule describing the permissible parameter values.",
        "remarks": "Currently, OSCAL does not standardize any formal rules language for value constraints. A test option may be used to specify a formal rule that may be automatically used if recognized by an OSCAL tool. Further development is needed to support the declaration of a rule language and value.",
        "cardinality": "zero or more"
      },
      {
        "name": "guideline",
        "schema_type": "field",
        "description": "Additional recommendations for the use of the parameter, or around what values should be provided.",
        "cardinality": "zero or more"
      },
      {
        "name": "value",
        "schema_type": "field",
        "description": "A recommended parameter value or set of values.",
        "remarks": "A value provided in a catalog can be redefined at any higher layer of OSCAL (e.g., Profile).",
        "cardinality": "zero or one"
      },
      {
        "name": "select",
        "schema_type": "field",
        "description": "A set of parameter value choices, that may be picked from to set the parameter value.",
        "remarks": ".",
        "cardinality": "zero or one"
      },
      {
        "name": "link",
        "schema_type": "field",
        "description": "",
        "cardinality": "zero or more"
      }
    ]
  },
  {
    "name": "label",
    "description": "A placeholder for a missing value, in display.",
    "schema_type": "field"
  },
  {
    "name": "desc",
    "group-name": "descriptions",
    "description": "Indicates and explains the purpose and use of a parameter",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      }
    ]
  },
  {
    "name": "constraint",
    "group-name": "constraints",
    "description": "A formal or informal expression of a constraint or test",
    "schema_type": "field",
    "flags": [
      {
        "name": "test",
        "schema_type": "flag"
      }
    ]
  },
  {
    "name": "guideline",
    "group-name": "guidance",
    "description": "A prose statement that provides a recommendation for the use of a parameter.",
    "schema_type": "field",
    "content_types": [
      {
        "name": "prose"
      }
    ]
  },
  {
    "name": "value",
    "description": "Indicates a permissible value for a parameter or property",
    "remarks": "In a declaration, value will commonly be given in groups, indicating a set of enumerated permissible values (i.e., for an element to be valid to a value constraint, it must equal one of the given values).\\n\\nIn a parameter, a value represents a value assignment to the parameter, overriding any value given at the point of insertion. When parameters are provided in OSCAL profiles, their values will override any values assigned lower down the stack.",
    "schema_type": "field"
  },
  {
    "name": "select",
    "description": "Presenting a choice among alternatives",
    "schema_type": "field",
    "flags": [
      {
        "name": "how-many",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "choice",
        "schema_type": "field",
        "cardinality": "zero or more"
      }
    ]
  },
  {
    "name": "choice",
    "group-name": "alternatives",
    "description": "A value selection among several such options",
    "schema_type": "field"
  },
  {
    "name": "part",
    "group-name": "parts",
    "description": "A partition or component of a control, subcontrol or part",
    "remarks": "Like properties (prop) and parameters (param), parts can be distinguished from other elements within their controls by their assigned class, such that they may be subjected to declarations logic using these values as bindings (and thereby getting open-ended extensibility).\\\n\\\nAn assigned class may frequently provide for a header in display, such that part[@class='objectives'] is displayed under a header Objectives, etc. Parts may also however have their own titles (title elements).\\n\\nMany parts are logical partitions or sections for prose. Other parts may be more formally constructed out of properties (prop elements) and/or their own parts. Such structured objects may, at the extreme, function virtually as control extensions or subcontrol-like objects (enhancements).",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "class",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "title",
        "schema_type": "field",
        "cardinality": "zero or one"
      },
      {
        "name": "prop",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "prose"
      },
      {
        "name": "part",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "link",
        "schema_type": "field",
        "cardinality": "zero or more"
      }
    ]
  },
  {
    "name": "link",
    "group-name": "links",
    "description": "A line or paragraph with a hypertext link",
    "remarks": "Works like an HTML anchor (a) except this is a line-oriented (block) element.",
    "schema_type": "field",
    "flags": [
      {
        "name": "href",
        "schema_type": "flag"
      },
      {
        "name": "rel",
        "schema_type": "flag"
      }
    ]
  },
  {
    "name": "references",
    "description": "A group of reference descriptions",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "link",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "ref",
        "schema_type": "field",
        "cardinality": "zero or more"
      }
    ]
  },
  {
    "name": "ref",
    "group-name": "refs",
    "description": "A reference, with one or more citations to standards, related documents, or other resources",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      }
    ],
    "content_types": [
      {
        "name": "citation",
        "schema_type": "field",
        "cardinality": "zero or more"
      },
      {
        "name": "prose"
      }
    ]
  },
  {
    "name": "citation",
    "group-name": "citations",
    "description": "Citation of a resource",
    "remarks": "Semantics of any contents within citation are implicit, not encoded. To mitigate problems establishin matches with bibliograpical databases, it is recommended a canonical identifier such as a DOI be provided for any citation.",
    "schema_type": "field",
    "flags": [
      {
        "name": "id",
        "schema_type": "flag"
      },
      {
        "name": "href",
        "schema_type": "flag"
      }
    ],
    "examples": [
      {
        "xml": "\\n<citation>Some citation of some sort</citation>\\n"
      }
    ]
  },
  {
    "name": "id",
    "description": "Unique identifier",
    "remarks": "No mechanism is proposed to ensure that id values do not collide across different catalogs. Use profiling without merge to detect such clashes.",
    "schema_type": "flag",
    "examples": [
      {
        "xml": "\\n<citation id=\"xyz2\">Some citation of some sort</citation>\\n"
      }
    ]
  },
  {
    "name": "class",
    "description": "Identifies the property or object within the control; a semantic hint",
    "remarks": "Overloading this attribute with more than one value is permitted, but not recommended.",
    "schema_type": "flag"
  },
  {
    "name": "href",
    "description": "A link to a document or document fragment (actual, nominal or projected)",
    "remarks": "Note in particular that href targets include elements (locations) in representations of documents that exist only by virtue of dynamic application, such as (for example) the results of profile resolution.",
    "schema_type": "flag"
  },
  {
    "name": "test",
    "description": "A formal (executable) expression of a constraint",
    "schema_type": "flag"
  },
  {
    "name": "rel",
    "description": "Purpose of the link",
    "schema_type": "flag"
  },
  {
    "name": "how-many",
    "description": "When selecting, a requirement such as one or more",
    "schema_type": "flag"
  },
  {
    "name": "depends-on",
    "description": "Another parameter invoking this one",
    "schema_type": "flag"
  },
  {
    "name": "model-version",
    "description": "Declares a major/minor version for this metaschema",
    "schema_type": "flag"
  },
  {
    "name": "metadata",
    "schema_type": "field"
  },
  {
    "name": "author",
    "group-name": "authors",
    "schema_type": "field"
  },
  {
    "name": "publication-date",
    "schema_type": "field"
  },
  {
    "name": "version",
    "schema_type": "field"
  },
  {
    "name": "iso-date",
    "schema_type": "flag"
  },
  {
    "name": "doc-id",
    "group-name": "document-identifiers",
    "schema_type": "field"
  },
  {
    "name": "type",
    "schema_type": "flag"
  },
  {
    "name": "party",
    "group-name": "parties",
    "schema_type": "field"
  },
  {
    "name": "person",
    "group-name": "persons",
    "schema_type": "field"
  },
  {
    "name": "org",
    "schema_type": "field"
  },
  {
    "name": "person-id",
    "group-name": "person-identifiers",
    "schema_type": "field"
  },
  {
    "name": "org-id",
    "group-name": "organization-identifiers",
    "schema_type": "field"
  },
  {
    "name": "hlink",
    "group-name": "hashed-links",
    "schema_type": "field"
  },
  {
    "name": "media-type",
    "schema_type": "flag"
  },
  {
    "name": "person-name",
    "schema_type": "field"
  },
  {
    "name": "org-name",
    "schema_type": "field"
  },
  {
    "name": "full-name",
    "schema_type": "field"
  },
  {
    "name": "short-name",
    "schema_type": "field"
  },
  {
    "name": "address",
    "schema_type": "field"
  },
  {
    "name": "addr-line",
    "group-name": "postal-address",
    "schema_type": "field"
  },
  {
    "name": "city",
    "schema_type": "field"
  },
  {
    "name": "state",
    "schema_type": "field"
  },
  {
    "name": "postal-code",
    "schema_type": "field"
  },
  {
    "name": "country",
    "schema_type": "field"
  },
  {
    "name": "email",
    "group-name": "email-addresses",
    "schema_type": "field"
  },
  {
    "name": "phone",
    "group-name": "telephone-numbers",
    "schema_type": "field"
  },
  {
    "name": "url",
    "group-name": "URLs",
    "schema_type": "field"
  },
  {
    "name": "notes",
    "schema_type": "field"
  },
  {
    "name": "resource",
    "group-name": "resources",
    "schema_type": "field"
  },
  {
    "name": "hash",
    "group-name": "hashes",
    "schema_type": "field"
  },
  {
    "name": "algorithm",
    "schema_type": "flag"
  },
  {
    "name": "role",
    "group-name": "roles",
    "schema_type": "field"
  },
  {
    "name": "extra-meta",
    "schema_type": "field"
  },
  {
    "name": "meta-group",
    "group-name": "metadata-groups",
    "schema_type": "field"
  },
  {
    "name": "meta",
    "group-name": "metadata-fields",
    "schema_type": "field"
  },
  {
    "name": "term",
    "schema_type": "flag"
  },
  {
    "name": "role-id",
    "schema_type": "flag"
  }
]